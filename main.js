/**
 * Aplica√ß√£o principal demonstrando todos os princ√≠pios SOLID implementados
 * 
 * Esta aplica√ß√£o serve como exemplo pr√°tico de uso do sistema refatorado,
 * mostrando como todos os padr√µes e princ√≠pios trabalham juntos.
 */

const { CharacterService } = require('./src/services');
const { InMemoryCharacterRepository } = require('./src/repositories');
const { CharacterSpecificationFactory } = require('./src/repositories/CharacterSpecification');
const { Character, CharacterName, CharacterLevel, CharacterClass } = require('./src/entities');
const { LoggerFactory, LogLevel } = require('./src/utils');

/**
 * Factory para configura√ß√£o da aplica√ß√£o
 * Factory Pattern: Centraliza cria√ß√£o e configura√ß√£o de componentes
 */
class ApplicationFactory {
  /**
   * Cria e configura servi√ßos da aplica√ß√£o com Dependency Injection
   */
  static createCharacterService() {
    // Dependency Injection: Repository injetado no Service
    const repository = new InMemoryCharacterRepository();
    const service = new CharacterService(repository);
    
    return service;
  }

  /**
   * Configura sistema de logging
   */
  static configureLogging(level = LogLevel.INFO) {
    const logger = LoggerFactory.forClass('DinosaurParkApplication', level);
    return logger;
  }
}

/**
 * Facade para simplificar uso do sistema
 * Facade Pattern: Interface simplificada para subsistemas complexos
 */
class DinosaurParkFacade {
  #service;
  #logger;

  constructor() {
    this.#service = ApplicationFactory.createCharacterService();
    this.#logger = ApplicationFactory.configureLogging();
  }

  async initializePark() {
    this.#logger.info('ü¶ï Inicializando Parque dos Dinossauros...');
    
    try {
      // Adiciona alguns personagens tem√°ticos
      await this.#service.createCharacter('Rex', 'Guerreiro', 95);
      await this.#service.createCharacter('Velociraptor', 'Arqueiro', 85);
      await this.#service.createCharacter('Triceratops', 'Paladino', 70);
      await this.#service.createCharacter('Pteranodon', 'Mago', 60);
      
      this.#logger.info('‚úÖ Parque inicializado com sucesso!');
    } catch (error) {
      this.#logger.logError(error, { operation: 'initializePark' });
      throw error;
    }
  }

  async displayParkStatus() {
    this.#logger.info('üìä Gerando relat√≥rio do parque...');
    
    const stats = await this.#service.getCharacterStatistics();
    const allCharacters = await this.#service.getAllCharacters();
    
    console.log('\n' + '='.repeat(50));
    console.log('ü¶ï RELAT√ìRIO DO PARQUE DOS DINOSSAUROS');
    console.log('='.repeat(50));
    
    console.log(`\nüìä ESTAT√çSTICAS GERAIS:`);
    console.log(`   Total de criaturas: ${stats.total}`);
    console.log(`   N√≠vel m√©dio: ${stats.averageLevel}`);
    console.log(`   Poder de combate total: ${stats.totalCombatPower.toFixed(1)}`);
    
    console.log(`\nüèõÔ∏è DISTRIBUI√á√ÉO POR CLASSE:`);
    Object.entries(stats.byClass).forEach(([className, count]) => {
      console.log(`   ${className}: ${count} criatura(s)`);
    });
    
    console.log(`\n‚≠ê EXPERI√äNCIA:`);
    console.log(`   Novatos: ${stats.levelDistribution.novice}`);
    console.log(`   Experientes: ${stats.levelDistribution.experienced}`);
    console.log(`   Mestres: ${stats.levelDistribution.masters}`);
    
    console.log(`\nü¶ï TODAS AS CRIATURAS:`);
    allCharacters.forEach((character, index) => {
      console.log(`   ${index + 1}. ${character.describe()}`);
    });
  }

  async simulateBattles() {
    this.#logger.info('‚öîÔ∏è Simulando batalhas...');
    
    console.log('\n' + '='.repeat(50));
    console.log('‚öîÔ∏è SIMULA√á√ÉO DE BATALHAS');
    console.log('='.repeat(50));
    
    try {
      const rex = await this.#service.findCharacterByName('Rex');
      const opponents = await this.#service.findViableOpponents('Rex');
      
      console.log(`\nü¶ñ ${rex.name().value()} pode lutar contra:`);
      opponents.forEach((opponent, index) => {
        const advantage = rex.calculateCombatPower() > opponent.calculateCombatPower() ? 
          '(Vantagem)' : '(Desvantagem)';
        console.log(`   ${index + 1}. ${opponent.describe()} ${advantage}`);
      });
      
      // Demonstra diferentes tipos de busca
      console.log('\nüèπ ARQUEIROS DISPON√çVEIS:');
      const archers = await this.#service.findCharactersByClass('Arqueiro');
      archers.forEach((archer, index) => {
        console.log(`   ${index + 1}. ${archer.describe()}`);
      });
      
      console.log('\n‚ö° CRIATURAS PODEROSAS (Poder > 80):');
      const powerfulSpec = CharacterSpecificationFactory.byMinimumCombatPower(80);
      const powerful = await this.#service.findCharactersBySpecification(powerfulSpec);
      powerful.forEach((creature, index) => {
        console.log(`   ${index + 1}. ${creature.describe()}`);
      });
      
    } catch (error) {
      this.#logger.logError(error, { operation: 'simulateBattles' });
    }
  }

  async demonstrateEvolution() {
    this.#logger.info('üß¨ Demonstrando evolu√ß√£o...');
    
    console.log('\n' + '='.repeat(50));
    console.log('üß¨ EVOLU√á√ÉO DE CRIATURAS');
    console.log('='.repeat(50));
    
    try {
      // Cria uma criatura jovem
      const youngDino = await this.#service.createCharacter('Baby Raptor', 'Arqueiro', 5);
      console.log(`\nü•ö Criatura nasceu: ${youngDino.describe()}`);
      
      // Evolui atrav√©s dos n√≠veis
      for (let i = 0; i < 5; i++) {
        const evolved = await this.#service.levelUpCharacter('Baby Raptor');
        console.log(`üìà Evoluiu para: ${evolved.describe()}`);
        
        if (evolved.isExperienced()) {
          console.log('üéâ Tornou-se experiente!');
          break;
        }
      }
      
    } catch (error) {
      this.#logger.logError(error, { operation: 'demonstrateEvolution' });
    }
  }

  async runInteractiveDemo() {
    console.log('\n' + '='.repeat(60));
    console.log('ü¶ï BEM-VINDO AO PARQUE DOS DINOSSAUROS');
    console.log('üìö Demonstra√ß√£o de Princ√≠pios SOLID e Clean Code');
    console.log('='.repeat(60));
    
    try {
      await this.initializePark();
      await this.displayParkStatus();
      await this.simulateBattles();
      await this.demonstrateEvolution();
      
      console.log('\n' + '='.repeat(60));
      console.log('üéì PRINC√çPIOS DEMONSTRADOS NESTA APLICA√á√ÉO');
      console.log('='.repeat(60));
      
      console.log('\nüìã SOLID PRINCIPLES:');
      console.log('   ‚úÖ S - Single Responsibility: Cada classe tem uma √∫nica responsabilidade');
      console.log('   ‚úÖ O - Open/Closed: Extens√≠vel via specifications e strategies');
      console.log('   ‚úÖ L - Liskov Substitution: Diferentes reposit√≥rios intercambi√°veis');
      console.log('   ‚úÖ I - Interface Segregation: Interfaces espec√≠ficas e focadas');
      console.log('   ‚úÖ D - Dependency Inversion: Depend√™ncia de abstra√ß√µes');
      
      console.log('\nü§∏ OBJECT CALISTHENICS:');
      console.log('   ‚úÖ Primitivos encapsulados em Value Objects');
      console.log('   ‚úÖ M√°ximo 2 vari√°veis de inst√¢ncia por classe');
      console.log('   ‚úÖ Uso de First Class Collections');
      console.log('   ‚úÖ M√©todos expressivos em vez de getters/setters');
      console.log('   ‚úÖ Evitar uso de ELSE em favor de early returns');
      
      console.log('\nüèóÔ∏è DESIGN PATTERNS:');
      console.log('   ‚úÖ Repository Pattern - Abstra√ß√£o para persist√™ncia');
      console.log('   ‚úÖ Specification Pattern - Crit√©rios de busca flex√≠veis');
      console.log('   ‚úÖ Strategy Pattern - Diferentes algoritmos intercambi√°veis');
      console.log('   ‚úÖ Factory Pattern - Cria√ß√£o centralizada de objetos');
      console.log('   ‚úÖ Command Pattern - Opera√ß√µes encapsuladas');
      console.log('   ‚úÖ Facade Pattern - Interface simplificada');
      console.log('   ‚úÖ Value Object Pattern - Encapsulamento de primitivos');
      
      console.log('\nüßπ CLEAN CODE PRACTICES:');
      console.log('   ‚úÖ Nomes expressivos e intencionais');
      console.log('   ‚úÖ Fun√ß√µes pequenas e focadas');
      console.log('   ‚úÖ Tratamento adequado de erros');
      console.log('   ‚úÖ C√≥digo autodocumentado');
      console.log('   ‚úÖ Consist√™ncia de estilo');
      
      console.log('\nüéØ BACKEND JAVASCRIPT PRACTICES:');
      console.log('   ‚úÖ Uso adequado de async/await');
      console.log('   ‚úÖ Error handling com classes customizadas');
      console.log('   ‚úÖ Logging estruturado');
      console.log('   ‚úÖ Modulariza√ß√£o adequada');
      console.log('   ‚úÖ Separation of Concerns');
      
    } catch (error) {
      this.#logger.logError(error, { operation: 'runInteractiveDemo' });
      console.error('\n‚ùå Erro durante a demonstra√ß√£o:', error.message);
    }
  }
}

// Execu√ß√£o da aplica√ß√£o
async function main() {
  const park = new DinosaurParkFacade();
  await park.runInteractiveDemo();
}

// Executa apenas se for chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { DinosaurParkFacade, ApplicationFactory };